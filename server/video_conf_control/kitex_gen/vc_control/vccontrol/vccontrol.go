// Code generated by Kitex v0.0.3. DO NOT EDIT.

package vccontrol

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/volcengine/VolcEngineRTC_Solution_Demo/server/video_conf_control/kitex_gen/vc_control"
)

func serviceInfo() *kitex.ServiceInfo {
	return vCControlServiceInfo
}

var vCControlServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "VCControl"
	handlerType := (*vc_control.VCControl)(nil)
	methods := map[string]kitex.MethodInfo{
		"handle_meeting_event":   kitex.NewMethodInfo(handleMeetingEventHandler, newVCControlHandleMeetingEventArgs, newVCControlHandleMeetingEventResult, false),
		"handle_record_callback": kitex.NewMethodInfo(handleRecordCallbackHandler, newVCControlHandleRecordCallbackArgs, newVCControlHandleRecordCallbackResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "vc_control",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.3",
		Extra:           extra,
	}
	return svcInfo
}

func handleMeetingEventHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*vc_control.VCControlHandleMeetingEventArgs)
	realResult := result.(*vc_control.VCControlHandleMeetingEventResult)
	success, err := handler.(vc_control.VCControl).HandleMeetingEvent(ctx, realArg.Param)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVCControlHandleMeetingEventArgs() interface{} {
	return vc_control.NewVCControlHandleMeetingEventArgs()
}

func newVCControlHandleMeetingEventResult() interface{} {
	return vc_control.NewVCControlHandleMeetingEventResult()
}

func handleRecordCallbackHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*vc_control.VCControlHandleRecordCallbackArgs)
	realResult := result.(*vc_control.VCControlHandleRecordCallbackResult)
	success, err := handler.(vc_control.VCControl).HandleRecordCallback(ctx, realArg.Param)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVCControlHandleRecordCallbackArgs() interface{} {
	return vc_control.NewVCControlHandleRecordCallbackArgs()
}

func newVCControlHandleRecordCallbackResult() interface{} {
	return vc_control.NewVCControlHandleRecordCallbackResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) HandleMeetingEvent(ctx context.Context, param *vc_control.TEventParam) (r *vc_control.TEventResp, err error) {
	var _args vc_control.VCControlHandleMeetingEventArgs
	_args.Param = param
	var _result vc_control.VCControlHandleMeetingEventResult
	if err = p.c.Call(ctx, "handle_meeting_event", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HandleRecordCallback(ctx context.Context, param *vc_control.TRecordCallbackParam) (r *vc_control.THTTPResp, err error) {
	var _args vc_control.VCControlHandleRecordCallbackArgs
	_args.Param = param
	var _result vc_control.VCControlHandleRecordCallbackResult
	if err = p.c.Call(ctx, "handle_record_callback", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
