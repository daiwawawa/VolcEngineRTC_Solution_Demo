// Code generated by Kitex v0.0.3. DO NOT EDIT.

package frontier

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/volcengine/VolcEngineRTC/server/video_conf_control/kitex_gen/frontier"
)

func serviceInfo() *kitex.ServiceInfo {
	return frontierServiceInfo
}

var frontierServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "Frontier"
	handlerType := (*frontier.Frontier)(nil)
	methods := map[string]kitex.MethodInfo{
		"push_to_client":      kitex.NewMethodInfo(pushToClientHandler, newFrontierPushToClientArgs, newFrontierPushToClientResult, false),
		"broadcast_to_client": kitex.NewMethodInfo(broadcastToClientHandler, newFrontierBroadcastToClientArgs, newFrontierBroadcastToClientResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "frontier",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.3",
		Extra:           extra,
	}
	return svcInfo
}

func pushToClientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontier.FrontierPushToClientArgs)
	realResult := result.(*frontier.FrontierPushToClientResult)
	success, err := handler.(frontier.Frontier).PushToClient(ctx, realArg.Param)
	if err != nil {
		switch v := err.(type) {
		case *frontier.UserException:
			realResult.UserException = v
		case *frontier.UnknownException:
			realResult.UnknownException = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newFrontierPushToClientArgs() interface{} {
	return frontier.NewFrontierPushToClientArgs()
}

func newFrontierPushToClientResult() interface{} {
	return frontier.NewFrontierPushToClientResult()
}

func broadcastToClientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontier.FrontierBroadcastToClientArgs)
	realResult := result.(*frontier.FrontierBroadcastToClientResult)
	success, err := handler.(frontier.Frontier).BroadcastToClient(ctx, realArg.Param)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontierBroadcastToClientArgs() interface{} {
	return frontier.NewFrontierBroadcastToClientArgs()
}

func newFrontierBroadcastToClientResult() interface{} {
	return frontier.NewFrontierBroadcastToClientResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PushToClient(ctx context.Context, param *frontier.TPushParam) (r *frontier.TPushResp, err error) {
	var _args frontier.FrontierPushToClientArgs
	_args.Param = param
	var _result frontier.FrontierPushToClientResult
	if err = p.c.Call(ctx, "push_to_client", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.UserException != nil:
		return r, _result.UserException
	case _result.UnknownException != nil:
		return r, _result.UnknownException
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BroadcastToClient(ctx context.Context, param *frontier.TBroadCastParam) (r *frontier.TBroadCastResp, err error) {
	var _args frontier.FrontierBroadcastToClientArgs
	_args.Param = param
	var _result frontier.FrontierBroadcastToClientResult
	if err = p.c.Call(ctx, "broadcast_to_client", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
