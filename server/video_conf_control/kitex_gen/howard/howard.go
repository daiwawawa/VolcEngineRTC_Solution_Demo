// Code generated by thriftgo (0.1.1). DO NOT EDIT.

package howard

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/VolcEngineRTC/server/video_conf_control/kitex_gen/base"
	"strings"
)

type CleanVideoRequest struct {
	Vid           string            `thrift:"Vid,1,required" json:"Vid"`
	IdentityInfo  string            `thrift:"IdentityInfo,2,required" json:"IdentityInfo"`
	CallbackArgs_ map[string]string `thrift:"CallbackArgs,3" json:"CallbackArgs,omitempty"`
	QTag          *string           `thrift:"QTag,4" json:"QTag,omitempty"`
	Base          *base.Base        `thrift:"Base,255" json:"Base,omitempty"`
}

func NewCleanVideoRequest() *CleanVideoRequest {
	return &CleanVideoRequest{}
}

func (p *CleanVideoRequest) GetVid() string {
	return p.Vid
}

func (p *CleanVideoRequest) GetIdentityInfo() string {
	return p.IdentityInfo
}

var CleanVideoRequest_CallbackArgs__DEFAULT map[string]string

func (p *CleanVideoRequest) GetCallbackArgs_() map[string]string {
	if !p.IsSetCallbackArgs_() {
		return CleanVideoRequest_CallbackArgs__DEFAULT
	}
	return p.CallbackArgs_
}

var CleanVideoRequest_QTag_DEFAULT string

func (p *CleanVideoRequest) GetQTag() string {
	if !p.IsSetQTag() {
		return CleanVideoRequest_QTag_DEFAULT
	}
	return *p.QTag
}

var CleanVideoRequest_Base_DEFAULT *base.Base

func (p *CleanVideoRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return CleanVideoRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CleanVideoRequest) SetVid(val string) {
	p.Vid = val
}
func (p *CleanVideoRequest) SetIdentityInfo(val string) {
	p.IdentityInfo = val
}
func (p *CleanVideoRequest) SetCallbackArgs_(val map[string]string) {
	p.CallbackArgs_ = val
}
func (p *CleanVideoRequest) SetQTag(val *string) {
	p.QTag = val
}
func (p *CleanVideoRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CleanVideoRequest = map[int16]string{
	1:   "Vid",
	2:   "IdentityInfo",
	3:   "CallbackArgs",
	4:   "QTag",
	255: "Base",
}

func (p *CleanVideoRequest) IsSetCallbackArgs_() bool {
	return p.CallbackArgs_ != nil
}

func (p *CleanVideoRequest) IsSetQTag() bool {
	return p.QTag != nil
}

func (p *CleanVideoRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CleanVideoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVid bool = false
	var issetIdentityInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetIdentityInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVid {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIdentityInfo {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CleanVideoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CleanVideoRequest[fieldId]))
}

func (p *CleanVideoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Vid = v
	}
	return nil
}

func (p *CleanVideoRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IdentityInfo = v
	}
	return nil
}

func (p *CleanVideoRequest) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.CallbackArgs_ = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.CallbackArgs_[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CleanVideoRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.QTag = &v
	}
	return nil
}

func (p *CleanVideoRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CleanVideoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CleanVideoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CleanVideoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Vid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Vid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CleanVideoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IdentityInfo", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdentityInfo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CleanVideoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCallbackArgs_() {
		if err = oprot.WriteFieldBegin("CallbackArgs", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.CallbackArgs_)); err != nil {
			return err
		}
		for k, v := range p.CallbackArgs_ {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CleanVideoRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetQTag() {
		if err = oprot.WriteFieldBegin("QTag", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.QTag); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CleanVideoRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CleanVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CleanVideoRequest(%+v)", *p)
}

func (p *CleanVideoRequest) DeepEqual(ano *CleanVideoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Vid) {
		return false
	}
	if !p.Field2DeepEqual(ano.IdentityInfo) {
		return false
	}
	if !p.Field3DeepEqual(ano.CallbackArgs_) {
		return false
	}
	if !p.Field4DeepEqual(ano.QTag) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CleanVideoRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Vid, src) != 0 {
		return false
	}
	return true
}
func (p *CleanVideoRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.IdentityInfo, src) != 0 {
		return false
	}
	return true
}
func (p *CleanVideoRequest) Field3DeepEqual(src map[string]string) bool {

	if len(p.CallbackArgs_) != len(src) {
		return false
	}
	for k, v := range p.CallbackArgs_ {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CleanVideoRequest) Field4DeepEqual(src *string) bool {

	if p.QTag == src {
		return true
	} else if p.QTag == nil || src == nil {
		return false
	}
	if strings.Compare(*p.QTag, *src) != 0 {
		return false
	}
	return true
}
func (p *CleanVideoRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CleanVideoResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewCleanVideoResponse() *CleanVideoResponse {
	return &CleanVideoResponse{}
}

var CleanVideoResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CleanVideoResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return CleanVideoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CleanVideoResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CleanVideoResponse = map[int16]string{
	255: "BaseResp",
}

func (p *CleanVideoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CleanVideoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CleanVideoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CleanVideoResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CleanVideoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CleanVideoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CleanVideoResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CleanVideoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CleanVideoResponse(%+v)", *p)
}

func (p *CleanVideoResponse) DeepEqual(ano *CleanVideoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CleanVideoResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type HowardService interface {
	CleanVideo(ctx context.Context, request *CleanVideoRequest) (r *CleanVideoResponse, err error)
}

type HowardServiceClient struct {
	c thrift.TClient
}

func NewHowardServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HowardServiceClient {
	return &HowardServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewHowardServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HowardServiceClient {
	return &HowardServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewHowardServiceClient(c thrift.TClient) *HowardServiceClient {
	return &HowardServiceClient{
		c: c,
	}
}

func (p *HowardServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *HowardServiceClient) CleanVideo(ctx context.Context, request *CleanVideoRequest) (r *CleanVideoResponse, err error) {
	var _args HowardServiceCleanVideoArgs
	_args.Request = request
	var _result HowardServiceCleanVideoResult
	if err = p.Client_().Call(ctx, "CleanVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type HowardServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      HowardService
}

func (p *HowardServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HowardServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HowardServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHowardServiceProcessor(handler HowardService) *HowardServiceProcessor {
	self := &HowardServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CleanVideo", &howardServiceProcessorCleanVideo{handler: handler})
	return self
}
func (p *HowardServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type howardServiceProcessorCleanVideo struct {
	handler HowardService
}

func (p *howardServiceProcessorCleanVideo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HowardServiceCleanVideoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CleanVideo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := HowardServiceCleanVideoResult{}
	var retval *CleanVideoResponse
	if retval, err2 = p.handler.CleanVideo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CleanVideo: "+err2.Error())
		oprot.WriteMessageBegin("CleanVideo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CleanVideo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type HowardServiceCleanVideoArgs struct {
	Request *CleanVideoRequest `thrift:"request,1" json:"request"`
}

func NewHowardServiceCleanVideoArgs() *HowardServiceCleanVideoArgs {
	return &HowardServiceCleanVideoArgs{}
}

var HowardServiceCleanVideoArgs_Request_DEFAULT *CleanVideoRequest

func (p *HowardServiceCleanVideoArgs) GetRequest() *CleanVideoRequest {
	if !p.IsSetRequest() {
		return HowardServiceCleanVideoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *HowardServiceCleanVideoArgs) SetRequest(val *CleanVideoRequest) {
	p.Request = val
}

var fieldIDToName_HowardServiceCleanVideoArgs = map[int16]string{
	1: "request",
}

func (p *HowardServiceCleanVideoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *HowardServiceCleanVideoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowardServiceCleanVideoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowardServiceCleanVideoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewCleanVideoRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowardServiceCleanVideoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CleanVideo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowardServiceCleanVideoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HowardServiceCleanVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowardServiceCleanVideoArgs(%+v)", *p)
}

func (p *HowardServiceCleanVideoArgs) DeepEqual(ano *HowardServiceCleanVideoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *HowardServiceCleanVideoArgs) Field1DeepEqual(src *CleanVideoRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type HowardServiceCleanVideoResult struct {
	Success *CleanVideoResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewHowardServiceCleanVideoResult() *HowardServiceCleanVideoResult {
	return &HowardServiceCleanVideoResult{}
}

var HowardServiceCleanVideoResult_Success_DEFAULT *CleanVideoResponse

func (p *HowardServiceCleanVideoResult) GetSuccess() *CleanVideoResponse {
	if !p.IsSetSuccess() {
		return HowardServiceCleanVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HowardServiceCleanVideoResult) SetSuccess(val *CleanVideoResponse) {
	p.Success = val
}

var fieldIDToName_HowardServiceCleanVideoResult = map[int16]string{
	0: "success",
}

func (p *HowardServiceCleanVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HowardServiceCleanVideoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowardServiceCleanVideoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowardServiceCleanVideoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCleanVideoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowardServiceCleanVideoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CleanVideo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowardServiceCleanVideoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HowardServiceCleanVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowardServiceCleanVideoResult(%+v)", *p)
}

func (p *HowardServiceCleanVideoResult) DeepEqual(ano *HowardServiceCleanVideoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *HowardServiceCleanVideoResult) Field0DeepEqual(src *CleanVideoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
